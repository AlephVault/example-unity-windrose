using UnityEngine;
using UnityEngine.Events;
using System.Collections;
using Mirror;
using NetRose.Behaviours;
using NetRose.Behaviours.Auth.Messages;
using System.Collections.Generic;
using System;

namespace NetworkedSamples
{
    namespace Behaviours
    {
        namespace Sessions
        {
            /// <summary>
            ///   A sample class to forward the (mostly error) messages
            ///     generated by the auth and session interactions in
            ///     client side.
            /// </summary>
            [RequireComponent(typeof(SampleAuthenticator))]
            [RequireComponent(typeof(SampleSessionManager))]
            public class SampleMessageForwarder : MonoBehaviour
            {
                private SampleAuthenticator authenticator;

                private SampleSessionManager sessionManager;

                public class MessageArrivedEvent : UnityEvent<string> {}

                public readonly MessageArrivedEvent onMessage = new MessageArrivedEvent();

                private void Awake()
                {
                    authenticator = GetComponent<SampleAuthenticator>();
                    sessionManager = GetComponent<SampleSessionManager>();
                }
                // Use this for initialization
                void Start()
                {
                    authenticator.onClientAuthFlowCompleted.AddListener(OnClientAuthFlowCompleted);
                    sessionManager.onClientAuthMissingAccountID.AddListener(OnClientAuthMissingAccountID);
                    sessionManager.onClientSessionGhosted.AddListener(OnClientSessionGhosted);
                    sessionManager.onClientSessionDupeKicked.AddListener(OnClientSessionDupeKicked);
                    sessionManager.onClientSessionStarted.AddListener(OnClientSessionStarted);
                    sessionManager.onClientSessionMissingAccountData.AddListener(OnClientSessionMissingAccountData);
                    sessionManager.onClientInvalidCharacterID.AddListener(OnClientInvalidCharacterID);
                    sessionManager.onClientCharacterDoesNotExist.AddListener(OnClientCharacterDoesNotExist);
                    sessionManager.onClientSessionChooseCharacter.AddListener(OnClientChooseCharacter);
                    sessionManager.onClientSessionAlreadyUsingCharacter.AddListener(OnClientSessionAlreadyUsingThatCharacter);
                    // sessionManager.onClientSessionCannotReleaseCharacterInSingleMode.AddListener(...)
                    sessionManager.onClientSessionNotUsingCharacter.AddListener(OnClientSessionNotUsingCharacter);
                    // sessionManager.onClientSessionNoCharacterAvailable.AddListener(...);
                    sessionManager.onClientSessionUsingCharacter.AddListener(OnClientUsingCharacter);
                    sessionManager.onClientSessionReleasingCharacter.AddListener(OnClientSessionReleasingCharacter);
                    sessionManager.onClientSessionUnknownError.AddListener(OnClientSessionUnknownError);
                    sessionManager.onClientSessionEnded.AddListener(OnClientSessionEnded);
                }

                private void OnDestroy()
                {
                    authenticator.onClientAuthFlowCompleted.RemoveListener(OnClientAuthFlowCompleted);
                    sessionManager.onClientAuthMissingAccountID.RemoveListener(OnClientAuthMissingAccountID);
                    sessionManager.onClientSessionGhosted.RemoveListener(OnClientSessionGhosted);
                    sessionManager.onClientSessionDupeKicked.RemoveListener(OnClientSessionDupeKicked);
                    sessionManager.onClientSessionStarted.RemoveListener(OnClientSessionStarted);
                    sessionManager.onClientSessionMissingAccountData.RemoveListener(OnClientSessionMissingAccountData);
                    sessionManager.onClientInvalidCharacterID.RemoveListener(OnClientInvalidCharacterID);
                    sessionManager.onClientCharacterDoesNotExist.RemoveListener(OnClientCharacterDoesNotExist);
                    sessionManager.onClientSessionChooseCharacter.RemoveListener(OnClientChooseCharacter);
                    sessionManager.onClientSessionAlreadyUsingCharacter.RemoveListener(OnClientSessionAlreadyUsingThatCharacter);
                    // sessionManager.onClientSessionCannotReleaseCharacterInSingleMode.RemoveListener(...)
                    sessionManager.onClientSessionNotUsingCharacter.RemoveListener(OnClientSessionNotUsingCharacter);
                    // sessionManager.onClientSessionNoCharacterAvailable.RemoveListener(...);
                    sessionManager.onClientSessionUsingCharacter.RemoveListener(OnClientUsingCharacter);
                    sessionManager.onClientSessionReleasingCharacter.RemoveListener(OnClientSessionReleasingCharacter);
                    sessionManager.onClientSessionUnknownError.RemoveListener(OnClientSessionUnknownError);
                    sessionManager.onClientSessionEnded.RemoveListener(OnClientSessionEnded);
                }

                private void OnClientAuthFlowCompleted(AuthResponse response)
                {
                    if (response.IsSuccess)
                    {
                        onMessage.Invoke("Authenticated successfully. Starting session.");
                    }
                    else
                    {
                        onMessage.Invoke("Authentication failed with code: " + response.Code);
                    }
                }

                private void OnClientAuthMissingAccountID()
                {
                    onMessage.Invoke("Failed to start session. Somehow the account ID is absent.");
                }

                private void OnClientSessionDupeKicked()
                {
                    onMessage.Invoke("Already logged in. Aborting.");
                }

                private void OnClientSessionGhosted()
                {
                    onMessage.Invoke("Logged in from another device/instance. Ending session.");
                }

                private void OnClientSessionStarted()
                {
                    onMessage.Invoke("Session started.");
                }

                private void OnClientSessionMissingAccountData()
                {
                    onMessage.Invoke("Missing account data. Ending session.");
                }

                private void OnClientInvalidCharacterID(int id)
                {
                    onMessage.Invoke("An error occurred: invalid character id being selected.");
                }

                private void OnClientCharacterDoesNotExist(int id)
                {
                    onMessage.Invoke("An error occurred: non-existing character id being selected.");
                }

                private void OnClientSessionAlreadyUsingThatCharacter()
                {
                    onMessage.Invoke("Already using that character.");
                }

                private void OnClientSessionNotUsingCharacter()
                {
                    onMessage.Invoke("Currently not using any character.");
                }

                private void OnClientChooseCharacter(IReadOnlyList<Tuple<int, string>> list)
                {
                    onMessage.Invoke("Please choose a character.");
                }

                private void OnClientUsingCharacter(int id, SampleDatabase.Character character)
                {
                    onMessage.Invoke("A character was picked.");
                }

                private void OnClientSessionReleasingCharacter()
                {
                    onMessage.Invoke("A character was released.");
                }

                private void OnClientSessionEnded()
                {
                    onMessage.Invoke("Session ended.");
                }

                private void OnClientSessionUnknownError()
                {
                    onMessage.Invoke("Unknown session error. Ending session.");
                }
            }
        }
    }
}